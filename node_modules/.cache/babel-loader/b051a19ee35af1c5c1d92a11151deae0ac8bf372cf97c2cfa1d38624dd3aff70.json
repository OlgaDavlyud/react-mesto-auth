{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  // Метод проверки\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // Запрос получения данных пользователя с сервера\n  getInitialUserData() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  // Запрос получения карточек с сервера\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  // Запрос изменения данных пользователя\n  changeUserData(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._checkResponse);\n  }\n\n  // Запрос добавления карточки\n  addCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._checkResponse);\n  }\n\n  // Запрос удаления карточки\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  // Запрос установки и снятия лайка\n  changeLikeCardStatus(id, isLiked) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: isLiked ? \"PUT\" : \"DELETE\",\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  // Запрос обновления аватара\n  setNewAvatar(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(this._checkResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-57',\n  headers: {\n    authorization: 'de2e08e4-c231-4ebe-acd8-a48ea50e7d8e',\n    'content-type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_checkResponse","res","ok","json","Promise","reject","status","getInitialUserData","fetch","method","then","getInitialCards","changeUserData","data","body","JSON","stringify","name","about","addCard","link","deleteCard","id","changeLikeCardStatus","isLiked","setNewAvatar","avatar","api","authorization"],"sources":["/Users/olgadavlud/Desktop/Praktikum/react-mesto-auth/src/utils/Api.js"],"sourcesContent":["class Api {\n    constructor(options) {\n        this._baseUrl = options.baseUrl;\n        this._headers = options.headers;\n    }\n\n    // Метод проверки\n    _checkResponse(res) {\n        if(res.ok) {\n            return res.json();\n        }\n\n        return Promise.reject(`Ошибка: ${res.status}`)\n    }\n\n    // Запрос получения данных пользователя с сервера\n    getInitialUserData() {\n        return fetch (`${this._baseUrl}/users/me`, {\n            method: 'GET',\n            headers: this._headers\n        })\n        .then(this._checkResponse);\n    }\n\n    // Запрос получения карточек с сервера\n    getInitialCards() {\n        return fetch (`${this._baseUrl}/cards`, {\n            method: 'GET',\n            headers: this._headers\n        })\n        .then(this._checkResponse);\n    }\n\n    // Запрос изменения данных пользователя\n    changeUserData(data) {\n        return fetch (`${this._baseUrl}/users/me`, {\n            method: \"PATCH\",\n            headers: this._headers,\n            body: JSON.stringify({\n              name: data.name,\n              about: data.about,\n            })\n        })\n        .then(this._checkResponse);\n    }\n\n    // Запрос добавления карточки\n    addCard(data) {\n        return fetch (`${this._baseUrl}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                link: data.link,\n            })\n        })\n        .then(this._checkResponse);\n    }\n\n    // Запрос удаления карточки\n    deleteCard(id) {\n        return fetch (`${this._baseUrl}/cards/${id}`, {\n            method: 'DELETE',\n            headers: this._headers,\n        })\n        .then(this._checkResponse);\n    }\n\n    // Запрос установки и снятия лайка\n    changeLikeCardStatus(id, isLiked) {\n        return fetch (`${this._baseUrl}/cards/${id}/likes`, {\n            method: isLiked ? \"PUT\" : \"DELETE\",\n            headers: this._headers,\n        })\n        .then(this._checkResponse);\n    }\n\n    // Запрос обновления аватара\n    setNewAvatar(avatar) {\n        return fetch (`${this._baseUrl}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: avatar\n            })\n        })\n        .then(this._checkResponse);\n    }\n}\n\nconst api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-57',\n    headers: {\n      authorization: 'de2e08e4-c231-4ebe-acd8-a48ea50e7d8e',\n      'content-type': 'application/json'\n    }\n  });\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}